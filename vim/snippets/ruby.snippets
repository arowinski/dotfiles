snippet priv
	private

	${0}
snippet req
	require '${1}'

snippet def
	def ${1:method_name}
		${0}
	end
snippet cla
	class ${1:`substitute(vim_snippets#Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`}
		${0}
	end
snippet clai
	class ${1:`substitute(vim_snippets#Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`}
		def initialize(${2:args})
			${0}
		end
	end
snippet mod
	module ${1:`substitute(vim_snippets#Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`}
		${0}
	end
snippet defs
	def self.${1:class_method_name}
		${0}
	end
snippet definit
	def initialize(${1:args})
		${0}
	end
snippet r
	attr_reader :${0:attr_names}
snippet w
	attr_writer :${0:attr_names}
snippet rw
	attr_accessor :${0:attr_names}
#################
##### RSpec #####
#################
snippet spec
	describe ${2:`substitute(vim_snippets#Filename(), '\(_\|^\)\(.\)', 'g')`} do
		describe '${3:#method}' do
			it '${4:docstring}' do
				${5:expectations}
			end
		end
	end
snippet cont
	context '${1:message}' do
		${0}
	end
snippet desc
	describe '${1:#method}' do
	  it '${2:docstring}' do
		  ${3:expectations}
		end
	end
snippet it
	it '${1:docstring}' do
		${2:expectations}
	end
snippet iiexp
	it { is_expected.to ${1} }
snippet exp
	expect(${1}).to ${2}
snippet agg
	aggregate_failures '${1:message}' do
		${0}
	end
