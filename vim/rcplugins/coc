" Async completion

Plug 'neoclide/coc.nvim', {'branch': 'release' }
Plug 'antoinemadec/coc-fzf'

let g:coc_global_extensions = [
      \ 'coc-actions',
      \ 'coc-css',
      \ 'coc-emmet',
      \ 'coc-eslint',
      \ 'coc-go',
      \ 'coc-html',
      \ 'coc-jest',
      \ 'coc-json',
      \ 'coc-prettier',
      \ 'coc-snippets',
      \ 'coc-solargraph',
      \ 'coc-spell-checker',
      \ 'coc-sql',
      \ 'coc-styled-components',
      \ 'coc-stylelintplus',
      \ 'coc-syntax',
      \ 'coc-tailwindcss',
      \ 'coc-tsserver',
      \ 'coc-vimlsp',
      \ 'coc-webpack',
      \ 'coc-yaml',
      \ 'coc-yank'
      \]

nnoremap <leader>sr :silent CocRestart<CR>

inoremap <silent><expr> <C-l>
      \ pumvisible() ? coc#_select_confirm() :
      \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
      \ <SID>check_back_space() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
      \ coc#refresh()

inoremap <silent><expr> <C-k>
      \ pumvisible() ? "\<C-p>" :
      \ "\<C-r>=coc#rpc#request('snippetPrev', [])\<CR>"

inoremap <silent><expr> <C-j>
      \ pumvisible() ? "\<C-n>" :
      \ "\<C-r>=coc#rpc#request('snippetNext', [])\<CR>"

xmap <C-l> <Plug>(coc-snippets-select)

snoremap <silent><nowait><C-k> <Esc>:call coc#rpc#request('snippetPrev', [])<CR>
snoremap <silent><nowait><C-j> <Esc>:call coc#rpc#request('snippetNext', [])<CR>

let g:coc_snippet_prev = '<NOP>'
let g:coc_snippet_next = '<NOP>'

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

nmap <silent> [r <Plug>(coc-diagnostic-prev)
nmap <silent> ]r <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gh <Plug>(coc-references)
nmap <silent> <leader>p :call CocAction('format')<cr>
nmap <silent> <leader>cp :call CocAction('pickColor')<cr>

" show documentation
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction
nnoremap <silent> <leader>d :call <SID>show_documentation()<CR>

" Create mappings for function text object, requires document symbols feature of languageserver.
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

function! s:cocActionsOpenFromSelected(type) abort
  execute 'CocCommand actions.open ' . a:type
endfunction

xmap <silent> <leader>a :<C-u>execute 'CocCommand actions.open ' . visualmode()<CR>
nmap <silent> <leader>a :<C-u>set operatorfunc=<SID>cocActionsOpenFromSelected<CR>g@

nmap <silent> <leader>ss :<C-u>set operatorfunc=<SID>cocActionsOpenFromSelected<CR>g@iw
nnoremap <Leader>sa :<C-U>CocCommand cSpell.addWordToUserDictionary<CR>

nnoremap <silent> <space>y :<C-u>CocFzfList yank<CR>

" vim:ft=vim
