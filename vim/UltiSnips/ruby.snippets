global !p
def rb_class(snip, type):
	parts = vim.eval("ruby#class_name(1)")
	shiftwidth = int(vim.eval("&shiftwidth"))

	for idx, part in enumerate(parts):
		shift = shiftwidth * idx * ' '

		if idx == (len(parts) - 1):
			snip.rv += "\n" + snip.mkline("%s %s"%(type, part), shift)
			snip.rv += "\n" + snip.mkline('', shift + ' ' * shiftwidth)
		else:
			snip.rv += "\n" + snip.mkline("module %s"%(part), shift)
		snip.shift()

def rb_class_end(snip):
	parts = vim.eval("ruby#class_name(1)")
	snip.rv = ''

	for idx, part in enumerate(parts):
		shift = int(vim.eval("&shiftwidth"))* (len(parts) - 1 - idx) * ' '
		if idx != 0:
			snip.rv += "\n"
		snip.rv +=  snip.mkline("end", shift)
		snip.unshift()
endglobal

snippet priv "private" b
private

${0}
endsnippet

snippet req "" b
require '${1}'
endsnippet

snippet reqr "" b
require_relative './${1}'
endsnippet

snippet class "" b
# frozen_string_literal: true
`!p rb_class(snip, 'class')`${0}
`!p rb_class_end(snip)`
endsnippet

snippet module "" b
# frozen_string_literal: true
`!p rb_class(snip, 'module')`${0}
`!p rb_class_end(snip)`
endsnippet

snippet if
if ${1:condition}
	${0:${VISUAL}}
end
endsnippet

snippet ife
	if ${1:condition}
		${2:${VISUAL}}
	else
		${0}
	end
endsnippet

snippet defi "" b
def initialize($1)
	${0}
end
endsnippet

snippet def "" b
def ${1:method_name}
	${2}
end
endsnippet

snippet "(?<=def\s)self" "" r
self.${1:class_method_name}
	${0}
end
endsnippet

snippet ->
-> { ${0} }
endsnippet

snippet ->a
->(${1:args}) { ${0} }
endsnippet

snippet r "" b
attr_reader :${0:attr_names}
endsnippet

snippet w "" b
attr_writer :${0:attr_names}
endsnippet

snippet rw "" b
attr_accessor :${0:attr_names}
endsnippet

snippet del "" b
delegate :${1:method}, to: :${0:obj}
endsnippet

snippet "(?<=\w\s)b" "" r
{ |${1:var}| ${0} }
endsnippet

snippet "(?<=(\w|\))\s){" "" r
{ |${1:var}| ${0} 
endsnippet

#################
##### RSpec #####
#################

snippet spec "" b
`!v g:is_rails ? "require 'rails_helper'\n\n" : ''`RSpec.describe ${1:`!v ruby#class_name()`} do
	${0}
end
endsnippet

snippet desc "" b
describe '${1:#method}' do
	${2:${VISUAL: #assertions}}
end
endsnippet

snippet cont "" b
context '${1:message}' do
	${0:${VISUAL: #assertions}}
end
endsnippet

snippet it "" b
it '${1:docstring}' do
	${2:${VISUAL: #assertions}}
end
endsnippet

snippet iiexp "" b
it { is_expected.to ${1} }
endsnippet

snippet exp "" b
expect(${1}).to ${2}
endsnippet

snippet expr "" b
expect(${1}).to raise_error(${0:error})
endsnippet

snippet all "" b
allow(${1:stubbed}).to receive(${2:method})${3}
endsnippet

snippet agg "" b
aggregate_failures '${1:message}' do
	${2:${VISUAL: #examples}}
end
endsnippet

snippet dc
described_class
endsnippet

snippet dcn "" b
${1:instance} = described_class.new(${2:args})
endsnippet
